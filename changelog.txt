Command to generate Parser and Lexer : antlr4 -Dlanguage=Python3 -visitor <grammarfilename>.g4


Changelog to grammar.g4 : 
-   Lexer Rules : 
    -   add token for paralell session types using sign '|' : PRL     : '|';
-   Parser Rules : 
   -    | e=END prl=PRL spt=sprimetype {$type = $e.text + $prl.text + $spt.text + ($spt.type if not $spt.type == None else "") }
      | i=ID prl=PRL spt=sprimetype {$type = $i.text + $prl.text + $spt.text + ($spt.type if not $spt.type == None else "") }
   -    
        sprimetype returns [type]
        :
                PLUS CLPAR {$type = "["} i=ID s=SEMIC st=sprimetype {$type += "!" + $i.text + $s.text + ($st.type if not $st.type == None else "") } (c=COMMA i2=ID s2=SEMIC st2=sprimetype {$type += $c.text + "!" + $i2.text + $s2.text + ($st2.type if not $st2.type == None else "")})* {$type += "]"} CRPAR
            | AND CLPAR {$type = "["} i=ID s=SEMIC st=sprimetype {$type += "?" + $i.text + $s.text + ($st.type if not $st.type == None else "") } (c=COMMA i2=ID s2=SEMIC st2=sprimetype {$type += $c.text + "?" + $i2.text + $s2.text + ($st2.type if not $st2.type == None else "")})* {$type += "]"} CRPAR
            | r=REC i=ID d=DOT g=guarded {$type = $r.text + " V" + $i.text + " " + $d.text + ($g.type if not $g.type == None else "")}
            | i=ID {$type = "V" + $i.text}
            | e=END {$type = $e.text}
            | o=OUT i=ID s=SEMIC st=sprimetype {$type = $o.text + $i.text + $s.text + ($st.type if not $st.type == None else "") }
            | e=END prl=PRL spt=sprimetype {$type = $e.text + $prl.text + $spt.text + ($spt.type if not $spt.type == None else "") }
            | i=ID prl=PRL spt=sprimetype {$type = $i.text + $prl.text + $spt.text + ($spt.type if not $spt.type == None else "") }
            | sl=SLPAR o=OUT i=ID s=SEMIC st=sprimetype {$type = $sl.text + $o.text + $i.text + $s.text + ($st.type if not $st.type == None else "") }(c=COMMA o2=OUT i2=ID s2=SEMIC st2=sprimetype {$type += $c.text + $o2.text + $i2.text + $s2.text + ($st2.type if not $st2.type == None else "")})* sr=SRPAR {$type += $sr.text}
            | n=IN i=ID s=SEMIC st=sprimetype {$type = $n.text + $i.text + $s.text + ($st.type if not $st.type == None else "") }
            | sl=SLPAR n=IN i=ID s=SEMIC st=sprimetype {$type = $sl.text + $n.text + $i.text + $s.text + ($st.type if not $st.type == None else "") } (c=COMMA n2=IN i2=ID s2=SEMIC st2=sprimetype {$type += $c.text + $n2.text + $i2.text + $s2.text + ($st2.type if not $st2.type == None else "")})* sr=SRPAR {$type += $sr.text}
            ;
 